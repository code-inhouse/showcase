"""
Django settings for dating project.

Generated by 'django-admin startproject' using Django 1.10.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import json
from pathlib import Path
from django.utils.translation import ugettext_lazy as _


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_PATH = Path(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l)t=9slkj4x2-js5g_6k)e*8y&2jn#8gj-6$wr7ihueffpvo2m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

SITE_ID = 1


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'reversion',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.vk',
    'widget_tweaks',
    'rules',
    'solo',
    'dateprofile',
    'likes',
    'chats',
    'payments',
    'configurations',
    'activities',
    'feedbacks',
    'news',
    'loginfo',
    'achievements',
    'moderator_panel'
]

if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE = ['debug_toolbar.middleware.DebugToolbarMiddleware']
else:
    MIDDLEWARE = []

MIDDLEWARE += [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'dating.middleware.DisableCSRF',  # DO NOT USE IN PRODUCTION
    'dating.middleware.LastUserActivityMiddleware',
    # 'dating.middleware.RussianLangMiddleware',
    'loginfo.middleware.email_tracking_middleware'
]

ROOT_URLCONF = 'dating.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'dating.context_processors.use_analytics',
            ],
        },
    },
]

WSGI_APPLICATION = 'dating.wsgi.application'


AUTHENTICATION_BACKENDS = [
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]



# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = []


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'Europe/Kiev'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '..', 'static')
]

MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'media')
MEDIA_URL = '/media/'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# django-allauth settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_ADAPTER = 'dateprofile.allauth.DateprofileAccountAdapter'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
EMAIL_FROM = 'NaidiSebe <noreply@naidisebe.com>'
SOCIALACCOUNT_EMAIL_VERIFICATION = False
SOCIALACCOUNT_AUTO_SIGNUP = False
SOCIALACCOUNT_ADAPTER = 'dateprofile.allauth.SocialAccountAdapter'
SOCIALACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_FORMS = {}


# last activity middleware
LAST_ACTIVITY_INTERVAL_SECS = 5 * 60

# must be non less than 1
QUESTIONS_PER_SIGNUP = 5


BROKER_URL = 'redis://localhost:6379'
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 93600}
CELERY_RESULT_BACKEND = 'redis://localhost:6379'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Kiev'

DEFAULT_AVATAR = '/static/images/default_avatar.png'
DOMAIN = 'localhost:8000'



LIKE_NOTIFICATIONS_PERIOD = 60  # in minutes

with open(os.path.join(BASE_DIR, '..', 'config.json')) as f:
    config = json.loads(f.read())
    REDIS_MSG_CHANNEL = config['REDIS_MSG_CHANNEL']
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config['DATABASE']['NAME'],
            'USER': config['DATABASE']['USER'],
            'PASSWORD': config['DATABASE']['PASSWORD'],
            'HOST': config['DATABASE']['HOST'],
            'PORT': ''
        }
    }


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'timestamp': {
            'format': '[%(asctime)s] %(message)s'
        }
    },
    'handlers': {
        'email': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(
                str(BASE_PATH.parent.parent), 'email.log'
            ),
            'formatter': 'timestamp'
        }
    },
    'loggers': {
        'email': {
            'handlers': ['email'],
            'level': 'INFO',
            'propagate': True
        }
    }
}

LOG_QUERIES = False
if LOG_QUERIES:
    LOGGING['loggers']['django.db.backends'] = {
        'level': 'DEBUG',
        'handlers': ['console'],
    }
    LOGGING['handlers']['console'] = {
        'level': 'DEBUG',
        'filters': ['require_debug_true'],
        'class': 'logging.StreamHandler',
    }
    LOGGING['filters'] = {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        }
    }


if DEBUG:
    INTERNAL_IPS = ['127.0.0.1']

USE_ANALYTICS = False

LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian')),
]

LOCALE_PATHS = (
    os.path.join(BASE_DIR, '..', 'locale'),
)


# GEOIP settings
GEOIP_PATH = os.path.join(BASE_DIR, '..', '..', 'geoip')


#STATIC VERSION
STATIC_VERSION_PATH = os.path.join(BASE_DIR, '..', '..', 'static_version')
